--A)
CREATE OR REPLACE FUNCTION INSERIR() RETURNS TRIGGER AS $$
	DECLARE
		r historicos%rowtype;
		pe prerequisitos%rowtype;
	BEGIN 
		
		FOR pe IN  select p.* from ofertas o, prerequisitos p
					where o.cod_disc = p.cod_disc and o.cod_oferta = NEW.cod_oferta
			LOOP
				IF pe.prereq <> all (select h.cod_disc from historicos h
where h.cod_aluno = new.COD_ALUNO and h.nota >= 7) THEN
				RAISE EXCEPTION 'ALUNO % NAO POSSUI OS PREREQUISITOS NECESSARIOS', NEW.COD_ALUNO;
				RETURN NULL;
				END IF;
		
			END LOOP;

		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;
DROP TRIGGER INSER ON MATRICULAS;
CREATE TRIGGER INSER AFTER INSERT ON MATRICULAS
FOR EACH ROW EXECUTE PROCEDURE inserir();

insert into matriculas values(2,1);



select * from ofertas

--B)

CREATE OR REPLACE FUNCTION INSERIR_hora() RETURNS TRIGGER AS $$
	DECLARE
		r historicos%rowtype;
		pe ofertas%rowtype;
	BEGIN 
		
		FOR pe IN  select o.* from  matriculas m, ofertas o  where m.cod_oferta =  o.cod_oferta and m.cod_aluno = new.cod_aluno
			LOOP
			IF pe.horario =  any (select o.horario from  matriculas m, ofertas o  where m.cod_oferta =  o.cod_oferta and m.cod_aluno = new.cod_aluno and o.cod_oferta <> pe.cod_oferta)THEN
				RAISE EXCEPTION 'ALUNO % POSSUI MATRICULAS NO MESMO HORARIO', NEW.COD_ALUNO;
				RETURN NULL;
				END IF;
		
			END LOOP;

		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;
DROP TRIGGER INSER_hora_choque ON MATRICULAS;
CREATE TRIGGER INSER_hora_choque AFTER INSERT ON MATRICULAS
FOR EACH ROW EXECUTE PROCEDURE inserir_hora();

insert into matriculas values(3,1);

--C)
select h.cod_aluno, sum(d.num_creditos) 
from historicos h, disciplinas d
where h.cod_disc = d.cod_disc and h.cod_aluno = 1 and d.tipo= 'opcional'
group by h.cod_aluno;

select d.num_creditos
from matriculas m , disciplinas d, ofertas o
where o.cod_disc = d.cod_disc and m.cod_oferta = o.cod_oferta and m.cod_aluno = 1;


select  * from historicos 



CREATE OR REPLACE FUNCTION INSERIR_optativas() RETURNS TRIGGER AS $$
	BEGIN 
		
		IF (select h.cod_aluno, sum(d.num_creditos) 
			from historicos h, disciplinas d
			where h.cod_disc = d.cod_disc and h.cod_aluno = new.cod_aluno and d.tipo= 'opcional'
			group by h.cod_aluno) + (select d.num_creditos
									  from matriculas m , disciplinas d, ofertas o
									  where o.cod_disc = d.cod_disc and m.cod_oferta = o.cod_oferta and m.cod_aluno = NEW.cod_aluno and d.tipo='opcional') + 
									  (select d.num_creditos
									  from ofertas o, disciplinas d
									  where o.cod_disc = d.cod_disc and o.cod_oferta = new.cod_oferta)THEN
				RAISE EXCEPTION 'O ALUNO % NAO POSSUI CREDITOS OPTATIVOS', NEW.COD_ALUNO;
				RETURN NULL;
				END IF;
		
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

DROP TRIGGER INSER_optativas ON MATRICULAS;
CREATE TRIGGER INSER_optativas AFTER INSERT ON MATRICULAS
FOR EACH ROW EXECUTE PROCEDURE inserir_optativas();

insert into matriculas values(3,1);




------------2)

--a)

CREATE TABLE DEPARTAMENTO(
	DEPTO INT PRIMARY KEY,
	ORCAMENTO BIGINT,
	ENDERECO VARCHAR(50)
	);

CREATE TABLE EMPREGADO (
	NOME VARCHAR(30) PRIMARY KEY,
	SAL INT,
	DEP INT,
	NOMEGERENTE VARCHAR(30),
	FOREIGN KEY(NOMEGERENTE) REFERENCES EMPREGADO(NOME),
	FOREIGN KEY(DEP) REFERENCES DEPARTAMENTO(DEPTO)
	);

DROP TABLE EMPREGADO

CREATE OR REPLACE FUNCTION inserir() RETURNS TRIGGER AS $$
	BEGIN
		
		IF (SELECT ORCAMENTO FROM DEPARTAMENTO WHERE DEPTO = NEW.DEP)  < (SELECT COALESCE(SUM(SAL),0) FROM EMPREGADO WHERE DEP = NEW.DEP) + NEW.SAL THEN
			RAISE EXCEPTION 'ORCAMENTO MAXÍMO DO DEPARTAMENTO % ULTRAPASSADO', NEW.DEP;
			RETURN NULL;
		END IF;
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER ISEN BEFORE INSERT ON EMPREGADO
FOR EACH ROW EXECUTE PROCEDURE inserir();
DROP TRIGGER ISEN ON EMPREGADO

insert into DEPARTAMENTO VALUES(1,10000,'Rua da UFC');

insert into EMPREGADO VALUES('Johnny',2000,1, 'Johnny')
insert into EMPREGADO VALUES('Johnny2',8000,1, 'Johnny')




DROP TABLE EMPREGADO

CREATE OR REPLACE FUNCTION atualizar() RETURNS TRIGGER AS $$
	BEGIN
		
		IF NEW.DEP  = OLD.DEP THEN
			IF (SELECT ORCAMENTO FROM DEPARTAMENTO WHERE DEPTO = NEW.DEP)  < (SELECT COALESCE(SUM(SAL),0) FROM EMPREGADO WHERE DEP = NEW.DEP) + NEW.SAL - OLD.SAL THEN
				RAISE EXCEPTION 'ORCAMENTO MAXÍMO DO DEPARTAMENTO % ULTRAPASSADO', NEW.DEP;
				RETURN NULL;
			END IF;
		ELSE 
			IF (SELECT ORCAMENTO FROM DEPARTAMENTO WHERE DEPTO = NEW.DEP)  < (SELECT COALESCE(SUM(SAL),0) FROM EMPREGADO WHERE DEP = NEW.DEP) + NEW.SAL THEN
				RAISE EXCEPTION 'ORCAMENTO MAXÍMO DO DEPARTAMENTO % ULTRAPASSADO', NEW.DEP;
				RETURN NULL;
			END IF;
		END IF;
		
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER ATT BEFORE UPDATE ON EMPREGADO
FOR EACH ROW EXECUTE PROCEDURE atualizar();

drop table empregado
select * from empregado
select * from DEPARTAMENTO

insert into EMPREGADO VALUES('Johnny3',10000,2, 'Johnny3')
UPDATE EMPREGADO SET SAL = 15000 WHERE NOME = 'Johnny';
UPDATE EMPREGADO SET SAL = 15000, DEP = 2 WHERE NOME = 'Johnny';


CREATE OR REPLACE FUNCTION ATT_DEP() RETURNS TRIGGER AS $$
	BEGIN
		IF NEW.ORCAMENTO < (SELECT SUM(SAL) FROM EMPREGADO WHERE DEP = NEW.DEPTO) THEN
			RAISE EXCEPTION 'O VALOR DO ORCAMENTO É MUITO BAIXO NO DEPARTAMENTO %',NEW.DEPTO;
			RETURN NULL;
		END IF;
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER AT_DEP BEFORE UPDATE ON DEPARTAMENTO
FOR EACH ROW EXECUTE PROCEDURE ATT_DEP();

SELECT * FROM DEPARTAMENTO
SELECT * FROM EMPREGADO
UPDATE DEPARTAMENTO SET ORCAMENTO = 8000 WHERE DEPTO = 2;

-----------------------------------------------------------------------------------
--b)
CREATE OR REPLACE FUNCTION INSER_FUNC() RETURNS TRIGGER AS $$
	BEGIN
	
		IF (SELECT DISTINCT NOMEGERENTE FROM EMPREGADO WHERE DEP = NEW.DEP) IS NULL THEN
				RETURN NEW;
		ELSE
			IF NEW.NOMEGERENTE = (SELECT DISTINCT NOMEGERENTE FROM EMPREGADO WHERE DEP = NEW.DEP) THEN
				RETURN NEW;
			END IF;
		END IF;
		
		RAISE EXCEPTION 'NOME DO GERENTE DIFERENTE DO DEPARTAMENTO %', NEW.DEP;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER INSERT_FUNC_GERENTE BEFORE INSERT ON EMPREGADO
FOR EACH ROW EXECUTE PROCEDURE INSER_FUNC();
DROP TRIGGER INSERT_FUNC_GERENTE ON EMPREGADO

SELECT * FROM EMPREGADO
SELECT * FROM DEPARTAMENTO
INSERT INTO DEPARTAMENTO VALUES(3,10000,'QUIXADÁ')
INSERT INTO EMPREGADO VALUES('Leticia',3000,3,'Leticia')
INSERT INTO EMPREGADO VALUES('Leticia2',3000,3,'null')
delete from  empregado where nome = 'Leticia'
INSERT INTO EMPREGADO VALUES('Leticia2',3000,3,'Leticia')

CREATE OR REPLACE FUNCTION INSER_FUNC() RETURNS TRIGGER AS $$
	BEGIN
	
		IF (SELECT DISTINCT NOMEGERENTE FROM EMPREGADO WHERE DEP = NEW.DEP) IS NULL THEN
				RETURN NEW;
		ELSE
			IF NEW.NOMEGERENTE = (SELECT DISTINCT NOMEGERENTE FROM EMPREGADO WHERE DEP = NEW.DEP) THEN
				RETURN NEW;
			END IF;
		END IF;
		
		RAISE EXCEPTION 'NOME DO GERENTE DIFERENTE DO DEPARTAMENTO %', NEW.DEP;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER INSERT_FUNC_GERENTE BEFORE INSERT ON EMPREGADO
FOR EACH ROW EXECUTE PROCEDURE INSER_FUNC();
DROP TRIGGER INSERT_FUNC_GERENTE ON EMPREGADO

SELECT * FROM EMPREGADO
SELECT * FROM DEPARTAMENTO
INSERT INTO DEPARTAMENTO VALUES(3,10000,'QUIXADÁ')
INSERT INTO EMPREGADO VALUES('Leticia',3000,3,'Leticia')
INSERT INTO EMPREGADO VALUES('Leticia2',3000,3,'null')
delete from  empregado where nome = 'Leticia2'
INSERT INTO EMPREGADO VALUES('Leticia2',3000,3,'Leticia')


CREATE OR REPLACE FUNCTION ATT_FUNC() RETURNS TRIGGER AS $$
	BEGIN
	
		IF (SELECT DISTINCT NOMEGERENTE FROM EMPREGADO WHERE DEP = NEW.DEP) IS NULL THEN
				RETURN NEW;
		ELSE
			IF NEW.NOMEGERENTE = (SELECT DISTINCT NOMEGERENTE FROM EMPREGADO WHERE DEP = NEW.DEP) THEN
				RETURN NEW;
			END IF;
		END IF;
		
		RAISE EXCEPTION 'NOME DO GERENTE DIFERENTE DO DEPARTAMENTO %', NEW.DEP;
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;



CREATE TRIGGER ATT_FUNC_GERENTE BEFORE UPDATE ON EMPREGADO
FOR EACH ROW EXECUTE PROCEDURE ATT_FUNC();

UPDATE EMPREGADO SET NOME = 'Leticia2',SAL =10,DEP = 1, NOMEGERENTE = 'Leticia'
WHERE NOME = 'Leticia2';





